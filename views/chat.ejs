<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <style>
      * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

body {
    background-color: #121212;
    color: #e0e0e0;
}

/* Video area */
#videos {
    display: grid;
    grid-template-columns: 1fr;
    height: 100vh;
    overflow: hidden;
    background: #000;
}

.video-player {
    background-color: #1c1c1c;
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.smallFrame {
    position: fixed;
    bottom: 100px;
    right: 20px;
    height: 170px;
    width: 300px;
    border-radius: 10px;
    border: 2px solid #00ffcc;
    box-shadow: 0 0 15px rgba(0, 255, 204, 0.5);
    z-index: 10;
}

/* Controls */
#controls {
    position: fixed;
    bottom: 25px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 1em;
    background: rgba(25, 25, 25, 0.6);
    padding: 12px 20px;
    border-radius: 50px;
    box-shadow: 0 0 20px rgba(0, 255, 204, 0.3);
}

.control-container {
    background: #222;
    padding: 18px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 1px solid #333;
}

.control-container:hover {
    transform: scale(1.1);
    box-shadow: 0 0 12px rgba(0, 255, 204, 0.7);
}

.control-container svg {
    height: 28px;
    width: 28px;
    fill: white;
}

#leave-btn {
    background-color: #ff4040;
    box-shadow: 0 0 12px rgba(255, 64, 64, 0.7);
}

/* Incoming call popup */
#incoming-call {
    background: rgba(0, 0, 0, 0.85);
    backdrop-filter: blur(5px);
}

#incoming-call .bg-white {
    background: #1f1f1f;
    border: 1px solid #00ffcc;
    box-shadow: 0 0 15px rgba(0, 255, 204, 0.3);
    color: #e0e0e0;
}

/* Chat area */
main {
    background: #181818;
    padding: 16px;
    color: #e0e0e0;
}

.nobody {
    color: #777;
    font-style: italic;
}

#message-container > div {
    margin-bottom: 12px;
}

/* OUTGOING messages (you) */
.user-message {
    background: #075e54;
    color: #fff;
    padding: 10px 14px;
    border-radius: 18px 18px 4px 18px;
    max-width: 70%;
    font-size: 15px;
    line-height: 1.4;
    box-shadow: 0 1px 2px rgba(0,0,0,0.3);
}

/* INCOMING messages (other person) */
.incoming-message {
    background: #2a2a2a;
    color: #fff;
    padding: 10px 14px;
    border-radius: 18px 18px 18px 4px;
    max-width: 70%;
    font-size: 15px;
    line-height: 1.4;
    box-shadow: 0 1px 2px rgba(0,0,0,0.3);
}

/* Message alignment */
.user-container {
    display: flex;
    justify-content: flex-end;
}

.incoming-container {
    display: flex;
    justify-content: flex-start;
}

/* Chat form */
form {
    background: #1a1a1a;
    border-top: 1px solid #333;
}

#messagebox {
    background: #2a2a2a;
    color: white;
    border: 1px solid #444;
}

#messagebox:focus {
    border: 1px solid #00ffcc;
    box-shadow: 0 0 8px rgba(0, 255, 204, 0.5);
}

button[type="submit"] {
    background: #00ffcc;
    color: #121212;
    font-weight: bold;
    border-radius: 8px;
    transition: all 0.3s ease;
}

button[type="submit"]:hover {
    background: #00e6b8;
}

/* Mobile tweaks */
@media screen and (max-width: 600px) {
    .smallFrame {
        height: 80px;
        width: 120px;
    }
    .control-container {
        padding: 14px;
    }
    .control-container svg {
        height: 22px;
        width: 22px;
    }
}

    </style>
    <link href="/css/style.css" rel="stylesheet">
</head>

<body class="flex flex-col h-dvh bg-gray-200">
    <%- include('partials/header') %>
        <div class="fixed videoblock hidden z-[222] w-full h-svh">
            <div id="videos">
                <video class="video-player" id="localVideo" autoplay muted playsinline></video>
                <video class="video-player" id="remoteVideo" autoplay playsinline></video>
            </div>
            <div id="controls">
                <div class="control-container" id="cameraButton">
                    <svg width="21" height="14" viewBox="0 0 21 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path
                            d="M20.525 2.149C20.365 2.05 20.183 2 20 2C19.847 2 19.694 2.035 19.553 2.105L17 3.382V3C17 1.346 15.654 0 14 0H3C1.346 0 0 1.346 0 3V11C0 12.654 1.346 14 3 14H14C15.654 14 17 12.654 17 11V10.618L19.553 11.894C19.694 11.965 19.847 12 20 12C20.183 12 20.365 11.95 20.525 11.851C20.82 11.668 21 11.347 21 11V3C21 2.653 20.82 2.332 20.525 2.149ZM5 8.5C4.171 8.5 3.5 7.829 3.5 7C3.5 6.171 4.171 5.5 5 5.5C5.829 5.5 6.5 6.171 6.5 7C6.5 7.829 5.829 8.5 5 8.5Z"
                            fill="white" />
                    </svg>
                </div>

                <div class="control-container" id="hangup">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M0 0h24v24H0z" fill="red" />
                        <path
                            d="M20 15.5c-.78 0-1.55-.3-2.12-.88l-1.43-1.42a4.007 4.007 0 0 0-5.54 0l-1.43 1.42A2.983 2.983 0 0 1 4 15.5c-.78 0-1.55-.3-2.12-.88A2.983 2.983 0 0 1 1 12.5a2.983 2.983 0 0 1 .88-2.12l7-7a4.007 4.007 0 0 1 5.54 0l7 7c.58.58.88 1.34.88 2.12s-.3 1.55-.88 2.12c-.58.58-1.34.88-2.12.88z" />
                    </svg>
                </div>

                <div class="control-container" id="micButton">
                    <svg width="20" height="20" viewBox="0 0 14 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd"
                            d="M7 12.5C8.7 12.5 10 11.2 10 9.5V3.5C10 1.8 8.7 0.5 7 0.5C5.3 0.5 4 1.8 4 3.5V9.5C4 11.2 5.3 12.5 7 12.5ZM12.3 9.5C12.3 12.5 9.8 14.6 7 14.6C4.2 14.6 1.7 12.5 1.7 9.5H0C0 12.9 2.7 15.7 6 16.2V19.5H8V16.2C11.3 15.7 14 12.9 14 9.5H12.3Z"
                            fill="white" />
                    </svg>
                </div>
            </div>
        </div>
        <div id="incoming-call"
            class="fixed hidden z-[222] w-full h-dvh bg-gray-900 bg-opacity-75 flex items-center justify-center">
            <div class="bg-white p-8 rounded-md text-center">
                <p class="mb-4">Incoming Call...</p>
                <button id="accept-call" class="bg-green-500 text-white py-2 px-4 rounded-md">Accept</button>
                <button id="reject-call" class="bg-red-500 text-white py-2 px-4 rounded-md ml-2">Reject</button>
            </div>
        </div>
        <main class="flex-1 p-4 overflow-y-auto relative" id="message-container">
            <div
                class="text-zinc-400 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-2/3 text-center nobody">
                bhagwaan kasam koi nahi hai yaha, ruko shaayad koi
                aajaye.</div>
        </main>
        <form id="chatform" class="bg-white p-4 flex">
            <input type="hidden" id="userid" value="">
            <input type="text" id="messagebox"
            class="flex-1  border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                placeholder="Type a message">
            <button type="submit"
                class="ml-2 bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700">Send</button>
        </form>
        <video id="local-video" class="hidden" autoplay></video>
        <video id="remote-video" class="hidden" autoplay></video>

        <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"
            integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
            crossorigin="anonymous"></script>

        <script>
            const socket = io();
            const chatform = document.querySelector("#chatform");
            const messagebox = document.querySelector("#messagebox");
            const messagecontainer = document.querySelector("#message-container");

            let room;

            socket.emit("joinroom");

            socket.on("joined", function (roomname) {
                room = roomname;
                console.log('joined')
                document.querySelector(".nobody").classList.add("hidden");
            })

            socket.on("message", function (message) {
                receiveMessage(message);
            })

            chatform.addEventListener("submit", function (event) {
                event.preventDefault();
                socket.emit("message", { room: room, message: messagebox.value });
                attachMessage(messagebox.value);
                messagebox.value = "";
            })

            function attachMessage(message) {
                const userMessageContainer = document.createElement('div');
                userMessageContainer.classList.add('flex', 'my-2', 'justify-end');

                const userMessageDiv = document.createElement('div');

               userMessageContainer.classList.add('user-container');
               userMessageDiv.classList.add('user-message');

                const userMessageText = document.createElement('p');
                userMessageText.textContent = message;

                userMessageDiv.appendChild(userMessageText);

                userMessageContainer.appendChild(userMessageDiv);

                document.getElementById('message-container').appendChild(userMessageContainer);

                document.querySelector("#message-container").scrollTop = document.querySelector("#message-container").scrollHeight;
            }

            function receiveMessage(message) {
                const messageContainer = document.createElement('div');
                messageContainer.classList.add('flex', 'my-2', 'justify-start');

                const messageDiv = document.createElement('div');
                
               messageContainer.classList.add('incoming-container');
               messageDiv.classList.add('incoming-message');

                const messageText = document.createElement('p');
                messageText.textContent = message;

                messageDiv.appendChild(messageText);

                messageContainer.appendChild(messageDiv);

                document.getElementById('message-container').appendChild(messageContainer);
                document.querySelector("#message-container").scrollTop = document.querySelector("#message-container").scrollHeight;
            }

            // WEBRTC START
            let localStream;
            let remoteStream;
            let peerConnection;
            let inCall = false;

            const rtcSettings = {
                iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
            };

            const initialize = async () => {
                socket.on("signalingMessage", handleSignalingMessage);

                try {
                    localStream = await navigator.mediaDevices.getUserMedia({
                        audio: true,
                        video: true
                    })
                    document.querySelector("#localVideo").srcObject = localStream;
                    document.querySelector("#localVideo").style.display = "block";

                    initiateOffer();

                    inCall = true;
                }
                catch (err) {
                    console.log("Rejected by browser" + err);
                }
            }

            const initiateOffer = async () => {
                await createPeerConnection();
                try {
                    const offer = await peerConnection.createOffer();
                    await peerConnection.setLocalDescription(offer);
                    socket.emit("signalingMessage", {
                        room,
                        message: JSON.stringify({
                            type: "offer",
                            offer
                        })
                    })
                }
                catch (err) {
                    console.log("error in creating offer" + err);
                }
            }

            const createPeerConnection = () => {
                peerConnection = new RTCPeerConnection(rtcSettings);

                remoteStream = new MediaStream();

                document.querySelector("#remoteVideo").srcObject = remoteStream;
                document.querySelector("#remoteVideo").style.display = "block";
                document.querySelector("#localVideo").classList.add("smallFrame");

                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                })

                peerConnection.ontrack = (event) => {
                    event.streams[0].getTracks().forEach(track => {
                        remoteStream.addTrack(track);
                    })
                }

                peerConnection.onicecandidate = (event) => {
                    if (event.candidate) {
                        console.log("Sending Ice Candidates");

                        socket.emit("signalingMessage", {
                            room,
                            message: JSON.stringify({
                                type: "candidate",
                                candidate: event.candidate
                            })
                        })
                    }
                }

                peerConnection.onconnectionstatechange = () => {
                    console.log("connection state change hui ", peerConnection.connectionState);
                }
            }

            const handleSignalingMessage = async (message) => {
                const { type, offer, answer, candidate } = JSON.parse(message);
                if (type === "offer") handleOffer(offer);
                if (type === "answer") handleAnswer(answer);
                if (type === "candidate" && peerConnection) {
                    try { await peerConnection.addIceCandidate(candidate); }
                    catch (error) {
                        console.log(error);
                    }
                }
                if (type === "hangup") {
                    hangup()
                }
            }

            const handleOffer = async (offer) => {
                await createPeerConnection();
                try {
                    await peerConnection.setRemoteDescription(offer);
                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);
                    socket.emit("signalingMessage", { room, message: JSON.stringify({ type: "answer", answer }) });
                    inCall = true;
                }
                catch (error) {
                    console.log("failed to handle offer");
                }
            }

            const handleAnswer = async (answer) => {
                try {
                    await peerConnection.setRemoteDescription(answer);
                }
                catch (error) {
                    console.log("failed to handle answer");
                }
            }


            document.querySelector("#video-call-btn")
                .addEventListener("click", function () {
                    socket.emit("startVideoCall", { room })
                })

            socket.on("incomingCall", function () {
                console.log("hey");
                document.querySelector("#incoming-call").classList.remove("hidden");
            })

            socket.on("callAccepted", function () {
                initialize();
                document.querySelector(".videoblock").classList.remove("hidden");
            })

            document.querySelector("#accept-call")
                .addEventListener("click", function () {
                    document.querySelector("#incoming-call").classList.add("hidden");
                    initialize();
                    document.querySelector(".videoblock").classList.remove("hidden");
                    socket.emit("acceptCall", { room })
                })

            document.querySelector("#reject-call")
                .addEventListener("click", function () {
                    document.querySelector("#incoming-call").classList.add("hidden");
                    socket.emit("rejectCall", { room })
                })

            socket.on("callRejected", function () {
                alert("Call rejected by other user");
            })

            document.querySelector("#hangup")
                .addEventListener("click", function () {
                    hangup();
                })

            function hangup() {
                if (peerConnection) {
                    peerConnection.close();
                    peerConnection = null;
                    localStream.getTracks().forEach(track => track.stop());

                    document.querySelector(".videoblock").classList.add("hidden");
                    socket.emit("signalingMessage", { room, message: JSON.stringify({ type: "hangup" }) });
                    inCall = false;
                }
            }

            const micButton = document.querySelector("#micButton");
const cameraButton = document.querySelector("#cameraButton");

let micEnabled = true;
let cameraEnabled = true;

// 🎤 MIC BUTTON
micButton.addEventListener("click", () => {
    if (!localStream) return;

    micEnabled = !micEnabled;
    localStream.getAudioTracks().forEach(track => track.enabled = micEnabled);

    if (micEnabled) {
        micButton.style.backgroundColor = "#6df966";
    } else {
        micButton.style.backgroundColor = "red";
    }
});

// 📷 CAMERA BUTTON
cameraButton.addEventListener("click", () => {
    if (!localStream) return;

    cameraEnabled = !cameraEnabled;
    localStream.getVideoTracks().forEach(track => track.enabled = cameraEnabled);

    if (cameraEnabled) {
        cameraButton.style.backgroundColor = "#6df966";
        document.querySelector("#localVideo").style.opacity = "1";  // 👈 VIDEO VISIBLE
    } else {
        cameraButton.style.backgroundColor = "red";
        document.querySelector("#localVideo").style.opacity = "0";  // 👈 VIDEO BLACKED OUT
    }
});
        </script>
</body>

</html>